---
import "../styles/global.css";
import App from "../components/App.tsx";
import timetable from "../data/timetable.sample.json";

// ✅ 本番URLは環境変数で切替（既定は独自ドメイン）
const site = import.meta.env.PUBLIC_SITE_URL ?? 'https://sakaimachi-bus.amida-des.com';
const base = import.meta.env.PUBLIC_BASE_PATH ?? '/';
const siteUrl = new URL(base, site).toString();
const favIcon = siteUrl + 'favicon.svg';
const appleIcon = siteUrl + 'apple-touch-icon.png';

const siteName = "境町 ↔ 東京 高速バス ミニ";
const title = "境町 ↔ 東京 高速バス（王子駅・東京駅発着の次発・時刻表）";
const description = "境町バスターミナルと王子駅・東京駅を結ぶ高速バスの次発・以降・始発/終バスを平日/土日祝ダイヤ別に素早く確認できます。";
const ogImage = siteUrl + "og.png";
const ogImageAlt = "境町と東京を結ぶ高速バスの次発情報を伝えるOGPバナー";
const ogImageHeight = "630";
const ogImageWidth = "1200";
const twitterHandle = "@gmkz_com";
const siteAuthor = "Amida Design（非公式）";
const keywords = [
  "境町高速バス",
  "境町 東京 バス",
  "王子駅 高速バス",
  "東京駅 高速バス",
  "境町バスターミナル",
  "高速バス 時刻表",
  "境町 東京 直行バス"
].join(", ");
const publisher = { name: "Amida Design", url: "https://amida-des.com" };
const sameAsLinks = ["https://twitter.com/gmkz_com"];
const normaliseTime = (value: string | { weekday?: string; holiday?: string }) =>
  typeof value === "string"
    ? value
    : (value?.weekday ?? value?.holiday ?? "");

const routes = (timetable as any)?.routes ?? [];

const schemaWebApp = {
  "@context": "https://schema.org",
  "@type": "WebApplication",
  name: siteName,
  applicationCategory: "TravelApplication",
  operatingSystem: "Web",
  url: siteUrl,
  description,
  inLanguage: "ja",
  image: ogImage,
  publisher: {
    "@type": "Organization",
    name: publisher.name,
    url: publisher.url
  },
  author: siteAuthor,
  sameAs: sameAsLinks,
  potentialAction: {
    "@type": "SearchAction",
    target: `${siteUrl}?q={search_term_string}`,
    "query-input": "required name=search_term_string"
  }
};

const routeSchemas = routes.map((route: any) => {
  const isOutbound = route.id === "sakai_to_tokyo";
  const routeName = isOutbound ? "境町発 東京駅・王子駅 行き" : "東京駅・王子駅発 境町 行き";
  const stops = Array.isArray(route.stops) ? route.stops : [];
  const departure = stops[0] ?? (isOutbound ? "境町バスターミナル" : "東京駅" );
  const arrival = stops[stops.length - 1] ?? (isOutbound ? "東京駅" : "境町バスターミナル");
  const trips = (route.trips ?? []).slice(0, 6);

  return {
    "@context": "https://schema.org",
    "@type": "PublicTransportRoute",
    name: `境町⇄東京 高速バス ${routeName}`,
    provider: {
      "@type": "Organization",
      name: "境町⇄東京 高速バス",
      url: siteUrl
    },
    routeCode: isOutbound ? "sakai-tokyo" : "tokyo-sakai",
    departureStation: {
      "@type": "BusStation",
      name: departure
    },
    arrivalStation: {
      "@type": "BusStation",
      name: arrival
    },
    hasPart: {
      "@type": "ItemList",
      itemListElement: trips.map((trip: any, index: number) => {
        const dep = isOutbound ? trip.dep : (route.id === "tokyo_to_sakai" ? trip.dep_tokyo : trip.dep);
        const arr = isOutbound ? normaliseTime(trip.arr_tokyo) : trip.arr_sakai;
        return {
          "@type": "BusTrip",
          position: index + 1,
          name: isOutbound
            ? `境町 ${trip.dep} 発 → 東京 ${normaliseTime(trip.arr_tokyo)} 着`
            : `${trip.dep_tokyo ?? trip.dep_oji} 発 → 境町 ${trip.arr_sakai} 着`,
          departureTime: dep,
          arrivalTime: arr,
          departureBusStop: {
            "@type": "BusStop",
            name: isOutbound ? "境町バスターミナル" : "東京駅八重洲南口"
          },
          arrivalBusStop: {
            "@type": "BusStop",
            name: isOutbound ? "東京駅八重洲南口" : "境町バスターミナル"
          }
        };
      })
    }
  };
});

const jsonLd = [schemaWebApp, ...routeSchemas];
const initialNowIso = new Date().toISOString();
---
<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index,follow" />
    <meta name="keywords" content={keywords} />
    <meta name="author" content={siteAuthor} />
    <meta name="application-name" content={siteName} />
    <meta name="apple-mobile-web-app-title" content={siteName} />
    <meta name="theme-color" content="#0ea5e9" />
    <link rel="canonical" href={siteUrl} />
    <link rel="alternate" hreflang="ja-JP" href={siteUrl} />
    <link rel="icon" href={favIcon} type="image/svg+xml" />
    <link rel="apple-touch-icon" sizes="180x180" href={appleIcon} />

    <!-- ✅ OGP -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={siteUrl} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:image:secure_url" content={ogImage} />
    <meta property="og:image:type" content="image/png" />
    <meta property="og:image:width" content={ogImageWidth} />
    <meta property="og:image:height" content={ogImageHeight} />
    <meta property="og:image:alt" content={ogImageAlt} />
    <meta property="og:locale" content="ja_JP" />

    <!-- ✅ Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content={twitterHandle} />
    <meta name="twitter:creator" content={twitterHandle} />
    <meta name="twitter:url" content={siteUrl} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage} />
    <meta name="twitter:image:alt" content={ogImageAlt} />

    <!-- JSON-LD（既存） -->
    <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
  </head>
  <body>
    <App client:load initialNowIso={initialNowIso} />
  </body>
</html>
